name: Build and Test

on: 
  push:
    branches:
      - trunk

jobs:
  test:
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setting Up Go 
        uses: actions/setup-go@v4
        with:
          go-version: '^1.19.9'
          check-latest: true
          cache-dependency-path: hello/go.sum
      - name: Running Test
        run: |
          cd hello
          go test -v .

  debug-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Setting Up Go 
        uses: actions/setup-go@v4
        with:
          go-version: '^1.19.9'
          check-latest: true
          cache-dependency-path: hello/go.sum
      - name: Building Debug Version
        run: |
          cd hello
          go build -o hello.debug

  prod-build:
    needs:
      - debug-build
      - test
    runs-on: ubuntu-latest
    
    container:
      image: almalinux:9

    steps:
      - name: Install go toolset 
        run: dnf install -y go-toolset
      - name: Checkout Repository 
        uses: actions/checkout@v3
      - name: Building
        run: |
          cd hello 
          go build -ldflags="-linkmode=external -w -s" -o hello

  package:
    needs:
      - prod-build 
    runs-on: ubuntu-latest 
    container:
      image: almalinux:9 
    steps:
      - name: Install go toolset and rpmdevbuild 
        run: dnf install -y go-toolset rpmdevtools

      - name: Checkout Repository 
        uses: actions/checkout@v3

      - name: Setting Up RPM Dev Tools
        run: |
          rpmdev-setuptree
          cp ./SPECS/hello.spec $HOME/rpmbuild/SPECS/

      - name: Packaging Source 
        run: |
          set -e

          VERSION="0.1.1" # Will be changed later
          NAME=hello 

          FULLNAME="$NAME-$VERSION"
          ARCHIVE_NAME=$FULLNAME.tar.xz

          echo "Bundling $ARCHIVE_NAME..."

          rm -rf /tmp/$FULLNAME && cp -r hello /tmp/$FULLNAME

          tar -cvf - -C /tmp $FULLNAME | xz > $ARCHIVE_NAME
          cp $ARCHIVE_NAME $HOME/rpmbuild/SOURCES/
          mkdir -p ./artifacts/ 
          cp $ARCHIVE_NAME ./artifacts/
          echo "Cleaning up temp.."

          rm -rf /tmp/$FULLNAME

          echo "Done."


      - name: Building RPM
        run: |
          TZ="Asia/Jakarta"
          COMMIT_SHA=${{ github.sha }}
          BUILD_DATE=$(date +%Y%m%d%H%M)
          SHORT_SHA=$(echo $COMMIT_SHA | cut -c 1-7)
          STAMP="${BUILD_DATE}.git.${SHORT_SHA}"
          echo "Stamp: $STAMP"
          rpmbuild --define "_stamp .$STAMP" --define "_git_commit $COMMIT_SHA" --define "_build_date $BUILD_DATE" -ba $HOME/rpmbuild/SPECS/hello.spec

      - name: Listing & Copying Artifacts
        run: |
          mkdir -p ./artifacts/{sources,binary}
          echo $HOME
          cp $HOME/rpmbuild/RPMS/x86_64/*.rpm ./artifacts/binary/ 
          cp $HOME/rpmbuild/SRPMS/*.rpm ./artifacts/sources

      - name: Uploading Binary Artifacts 
        uses: actions/upload-artifact@v3
        with:
          name: deploy-artifacts
          path: |
            ./artifacts/binary/*.rpm
            ./artifacts/sources/*.rpm 
            ./artifacts/sources/*.tar.xz

  deploy:
    needs:
      - package 
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: deploy-artifacts

      - name: Installing SSH Key
        uses: kielabokkie/ssh-key-and-known-hosts-action@v1
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}
          ssh-host: ${{ vars.DEPLOY_HOST }}

      - name: List Deployment Files 
        run: ls -al ./

      - name: Deploy Using SSH 
        run: |
          echo "Deploying using ssh..."
          ssh ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }} "mkdir -p /tmp/installers/"
          scp ./binary/*.rpm ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }}:/tmp/installers/
          ssh ${{ vars.DEPLOY_USER }}@${{ vars.DEPLOY_HOST }} "rpm -Uvh /tmp/installers/*.rpm; systemctl enable hello; systemctl restart hello; rm -rf /tmp/installers"
          






